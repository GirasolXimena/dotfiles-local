" Hybrid relative numbers
set relativenumber
" set number

" Let's save undo info!

if !isdirectory($HOME."/.vim")
  call mkdir($HOME."/.vim", "", 0770)
endif

if !isdirectory($HOME."/.vim/undo-dir")
  call mkdir($HOME."/.vim/undo-dir", "", 0700)
endif

if !isdirectory($HOME."/.vim/backup")
  call mkdir($HOME."/.vim/backup", "p")
endif

if !isdirectory($HOME."/.vim/swap")
  call mkdir($HOME."/.vim/swap", "p")
endif

set undodir=$HOME/.vim/undo-dir//
set backupdir=$HOME/.vim/backup//
set directory=$HOME/.vim/swap//
set undofile
set swapfile
set backup

" Wildmenu
set wildmenu

" fuzzy file find
set path+=**

" Highlight Search
set hlsearch

" Move to first match
set incsearch

" Quicker window reposition
  nnoremap <C-S-Down> <C-w>J
  nnoremap <C-S-Up> <C-w>K
  nnoremap <C-S-Left> <C-w>H
  nnoremap <C-S-Right> <C-w>L
  nnoremap ; :

" Quicker window navigation
  nnoremap <leader><leader>j <C-w>j
  nnoremap <leader><leader>k <C-w>k
  nnoremap <leader><leader>h <C-w>h
  nnoremap <leader><leader>l <C-w>l

"execute pathogen#infect()
"call pathogen#helptags()

 " NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

" Autoclose NERDTree if it's the only open window left.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") &&
  \ b:NERDTree.isTabTree()) | q | endif

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

packloadall
silent! helptags ALL

" COLORS
"""" enable 24bit true color
set termguicolors

"""" enable the theme
syntax enable
colorscheme challenger_deep
if has('nvim') || has('termguicolors')
  set termguicolors
endif

" Fold Method
set foldmethod=indent

" CtrlP Mappings
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader><leader>p :CtrlP<cr>

" Use system register for copy/paste
set clipboard=unnamed

" YouCompleteMe
" Timeout
let g:plug_timeout=300

" Go to definition
noremap <leader>] :YcmCompleter GoTo<cr>

" cTags
  set tags=tags;

" Undotree shortcut
  nnoremap <leader>u :UndotreeToggle<cr>

" No show for airline
  set noshowmode

" these Ctrl mappings work well when Caps Lock is mapped to Ctrl
  nmap <silent> t<C-n> :TestNearest<CR>
  nmap <silent> t<C-f> :TestFile<CR>
  nmap <silent> t<C-s> :TestSuite<CR>
  nmap <silent> t<C-l> :TestLast<CR>
  nmap <silent> t<C-g> :TestVisit<CR>

" Syntastic noob settings
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_python_pylint_exe = 'pylint3'
  let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']


" ALE for php
  let g:ale_fixers = { 'php': [ 'php_cs_fixer', ], }
  let g:airline#extensions#ale#enabled = 1

  let g:airline#extensions#tabline#enabled = 1
  let g:lightline = { 'colorscheme': 'challenger_deep'}


" Tagbar mappings
  nmap <F8> :TagbarToggle<CR>

" Fugitive mappings
 nnoremap <leader><leader>s :Gstatus<cr>
 
" React linting and autocomplete
  autocmd BufWritePost *.js AsyncRun -post=checktime ./node_modules/.bin/eslint --fix %
  let g:ale_linters = {
  \   'python': ['flake8', 'pylint'],
  \   'javascript': ['eslint'],
  \   'vue': ['eslint']
  \}
  let g:ale_fixers = {
  \    'javascript': ['eslint'],
  \    'vue': ['eslint'],
  \    'scss': ['prettier']
  \}
let g:ale_fix_on_save = 1
  let g:ale_sign_error = '●' " Less aggressive than the default '>>'
  let g:ale_sign_warning = '.'
  let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
  let g:user_emmet_leader_key='<Tab>'
  let g:user_emmet_settings = {
    \  'javascript.jsx' : {
      \      'extends' : 'jsx',
      \  },
    \}

" Limelight on Goyo
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight
